{"version":3,"sources":["ngDecorators.js"],"names":[],"mappings":";;;oBAsCM,SAAS;;AAnCf,aAAS,SAAS,GAAmB;YAAlB,WAAW,yDAAG,EAAE;;AAC/B,eAAO,SAAS,SAAS,CAAC,MAAM,EAAE;AAC9B,gBAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;AACvB,sBAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;aACrE;;AAED,gBAAM,aAAa,GAAG,WAAW,CAAC,QAAQ,CAAC;;AAE3C,gBAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE,WAAW,CAAC,CAAC;;AAEnE,gBAAI,WAAW,CAAC,QAAQ,EAAE;AACtB,uBAAO,CAAC,QAAQ,GAAG,UAAS,QAAQ,EAAE;;AAElC,4BAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;AACjC,2BAAO,WAAW,CAAC,QAAQ,CAAC;iBAC/B,CAAC;AACF,uBAAO,CAAC,QAAQ,CAAC,OAAO,GAAG,CAAC,UAAU,CAAC,CAAC;aAC3C;;AAED,eAAG,CAAC,SAAS,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;SACzC,CAAC;KACL;;AAED,aAAS,MAAM,GAAkB;0CAAd,YAAY;AAAZ,wBAAY;;;AAC3B,eAAO,SAAS,SAAS,CAAC,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE;;AAE/C,gBAAG,UAAU,EAAE;AACX,oBAAM,EAAE,GAAG,UAAU,CAAC,KAAK,CAAC;AAC5B,kBAAE,CAAC,OAAO,GAAG,YAAY,CAAC;aAC7B,MAAM;AACH,sBAAM,CAAC,OAAO,GAAG,YAAY,CAAC;aACjC;SACJ,CAAC;KACL;;AAID,aAAS,OAAO,CAAC,OAAO,EAAE;AACtB,eAAO,SAAS,SAAS,CAAC,MAAM,EAAE;AAC9B,mBAAO,GAAG,OAAO,GAAG,OAAO,GAAG,EAAE,CAAC;AACjC,gBAAI,CAAC,OAAO,CAAC,WAAW,EAAE;AACtB,sBAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;aACrE;AACD,eAAG,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;;AAEzC,eAAG,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,UAAC,SAAS,EAAK;AACjC,yBAAS,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;aACvE,CAAC,CAAC,CAAC;;AAEJ,kBAAM,CAAC,QAAQ,GAAG;uBAAM,SAAS,CAAC,OAAO,CAAC,WAAW,CAAC;aAAA,CAAC;SAC1D,CAAC;KACL;;;;;;;;6CArDO,KAAK;;;AAqCP,qBAAS,GAAG,EAAE;;iCAqBZ,SAAS;;8BAAE,MAAM;;+BAAE,OAAO","file":"../ngDecorators.js","sourcesContent":["import app from './appConfig';\nimport {state} from \"./commons/externalServices\";\n\nfunction Component(description = {}) {\n    return function decorator(target) {\n        if (!description.selector) {\n            throw new Error('@Component() must contains selector property! ');\n        }\n\n        const componentName = description.selector;\n\n        const options = Object.assign({ controller: target }, description);\n\n        if (description.template) {\n            options.template = function($element) {\n                // all component top element will have a class with their selector on them - this is to use as css starting point in modular css approach\n                $element.addClass(componentName);\n                return description.template;\n            };\n            options.template.$inject = ['$element'];\n        }\n\n        app.component(componentName, options);\n    };\n}\n\nfunction Inject(...dependencies) {\n    return function decorator(target, key, descriptor) {\n        // if it's true then we inject dependencies into function and not Class constructor\n        if(descriptor) {\n            const fn = descriptor.value;\n            fn.$inject = dependencies;\n        } else {\n            target.$inject = dependencies;\n        }\n    };\n}\n\nconst _services = {};\n\nfunction Service(options) {\n    return function decorator(target) {\n        options = options ? options : {};\n        if (!options.serviceName) {\n            throw new Error('@Service() must contains serviceName property!');\n        }\n        app.service(options.serviceName, target);\n\n        app.run(['$injector', ($injector) => {\n            _services[options.serviceName] = $injector.get(options.serviceName);\n        }]);\n\n        target.instance = () => _services[options.serviceName];\n    };\n}\n\n//secure decorator, extend secure constructor (check more redirects)\n\n\nexport {Component, Inject, Service};"],"sourceRoot":"/"}