{"version":3,"sources":["commons/authService.js"],"names":[],"mappings":";;;gDAMM,WAAW;;;oCANT,OAAO;;qCACP,IAAI;kCAAE,CAAC;;;;;;;AAKT,uBAAW;AAEF,yBAFT,WAAW,GAEC;;;AACV,wBAAI,CAAC,aAAa,GAAG,KAAK,CAAC;AAC3B,wBAAI,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;AAC9B,wBAAI,CAAC,UAAU,GAAG,KAAK,CAAC;iBAC3B;;yCANC,WAAW;;2BAQR,eAAC,QAAQ,EAAE,QAAQ,EAAE;AACtB,+BAAO,CAAC,EAAE,CAAC,CAAA,UAAU,OAAO,EAAE,IAAI,EAAE;AAChC,gCAAI,OAAO,GAAI,EAAC,aAAa,EAAE,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,QAAQ,CAAC,EAAC,CAAC;;AAE3E,gCAAI,EAAE,CAAC,GAAG,CAAC,OAAO,EAAE,EAAC,OAAO,EAAG,OAAO,EAAC,CAAC,CAAC,OAAO,CAAC,CAAA,UAAS,IAAI,EAAE;AAC5D,oCAAI,CAAC,aAAa,GAAG,IAAI,CAAC;AAC1B,oCAAI,CAAC,WAAW,CAAC,cAAc,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACpD,8CAAc,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;AAC5C,uCAAO,EAAE,CAAC;6BACb,CAAA,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,YAAW;AAC3B,oCAAI,EAAE,CAAC;6BACV,CAAC,CAAC;yBAEN,CAAA,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;qBACjB;;;2BAEc,2BAAG;AACd,+BAAO,IAAI,CAAC,aAAa,CAAC;qBAC7B;;;2BAEU,uBAAG;AACV,4BAAG,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;AAC3B,gCAAI,CAAC,WAAW,CAAC,QAAQ,GAAG,cAAc,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;yBAChE;AACD,+BAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;qBACpC;;;2BAEK,kBAAG;AACL,4BAAI,CAAC,aAAa,GAAG,KAAK,CAAC;AAC3B,4BAAI,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;AAC9B,sCAAc,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;qBACvC;;mCAvCC,WAAW;AAAX,2BAAW,GADhB,OAAO,CAAC,EAAC,WAAW,EAAE,aAAa,EAAC,CAAC,CAChC,WAAW,KAAX,WAAW;uBAAX,WAAW;;;+BAyCF,WAAW,CAAC,QAAQ","file":"../../commons/authService.js","sourcesContent":["import {Service} from \"../ngDecorators\"\nimport {http, q} from \"./externalServices\"\nimport User from \"./model/user\";\nimport storageService from './storageService';\n\n@Service({serviceName: 'authService'})\nclass AuthService {\n\n    constructor() {\n        this.authenticated = false;\n        this.currentUser = new User();\n        this.loginError = false;\n    }\n\n    login(username, password) {\n        return q()(function (resolve, fail) {\n            let headers =  {authorization: \"Basic \" + btoa(username + \":\" + password)};\n\n            http().get('/user', {headers : headers}).success(function(data) {\n                this.authenticated = true;\n                this.currentUser.setCredentials(username, password);\n                storageService().save(\"username\", username);\n                resolve();\n            }.bind(this)).error(function() {\n                fail();\n            });\n\n        }.bind(this));\n    };\n\n    isAuthenticated() {\n        return this.authenticated;\n    };\n\n    getUsername() {\n        if(!this.currentUser.username) {\n            this.currentUser.username = storageService().get(\"username\");\n        }\n        return this.currentUser.username;\n    };\n\n    logout() {\n        this.authenticated = false;\n        this.currentUser = new User();\n        storageService().remove(\"username\");\n    }\n}\nexport default AuthService.instance;"],"sourceRoot":"/"}