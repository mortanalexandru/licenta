{"version":3,"sources":["commons/socketService.js"],"names":[],"mappings":"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","file":"../../commons/socketService.js","sourcesContent":["/**\n * Created by Alexandru on 29/02/16.\n */\nimport {Service} from \"../ngDecorators\"\nimport Socket from \"sockjs-client\";\nimport Stomp from 'stompjs';\nimport {q} from \"./externalServices\"\nimport authService from './authService';\n\n@Service({serviceName: 'socketService'})\nclass SocketService {\n\n    connected = false;\n\n\n\n    connect(username, room) {\n        this.username = username;\n        this.room = room;\n        if(!this.connectingPromise){\n            this.connectingPromise = q()(function (resolve, reject) {\n                this.socket = new Socket('/chat');\n                this.stompClient = Stomp.over(this.socket);\n                this.stompClient.heartbeat.outgoing = 2000;\n                this.stompClient.heartbeat.incoming = 2000;\n                this.stompClient.connect({user: username, room: room}, function(){\n                    this.connectingPromise = null;\n                    this.connected = true;\n                    resolve();\n                }.bind(this));\n            }.bind(this));\n        }\n        return this.connectingPromise;\n    }\n\n    connectToSearchSocket() {\n        if(!this.connectingPromiseSearch){\n            this.connectingPromiseSearch = q()(function (resolve, reject) {\n                this.socketSearch = new Socket('/searchRooms');\n                this.stompClientSearch = Stomp.over(this.socketSearch);\n                this.stompClientSearch.heartbeat.outgoing = 2000;\n                this.stompClientSearch.heartbeat.incoming = 2000;\n                this.stompClientSearch.connect({}, function(){\n                    this.connectingPromiseSearch = null;\n                    this.connectedSearch = true;\n                    resolve();\n                }.bind(this));\n            }.bind(this));\n        }\n        return this.connectingPromiseSearch;\n    }\n\n    subscribeToSearch(url, handler, id) {\n        if (!this.connectedSearch) {\n            this.connectToSearchSocket().then(function () {\n                this.stompClientSearch.subscribe(url, handler);\n            }.bind(this));\n        } else {\n            return this.stompClientSearch.subscribe(url, handler);\n        }\n    }\n\n\n\n    setConnected(connected){\n        this.connected = connected;\n    }\n\n    isConnected(){\n        return this.connected;\n    }\n\n    subscribe(url, handler) {\n        if (!this.connected) {\n            this.connect(this.username, this.room).then(function () {\n                this.username = authService().getUsername();\n                this.stompClient.subscribe(url, handler);\n            }.bind(this));\n        } else {\n           return this.stompClient.subscribe(url, handler);\n        }\n    }\n\n    send(path, object) {\n        if (!this.connected) {\n            this.connect(this.username, this.room).then(function () {\n                this.stompClient.send(path, {}, JSON.stringify(object));\n            }.bind(this));\n        } else {\n            return this.stompClient.send(path, {}, JSON.stringify(object));\n        }\n\n    }\n\n    sendSearch(path, object) {\n        if (!this.connectedSearch) {\n            this.connectToSearchSocket().then(function () {\n                this.stompClientSearch.send(path, {}, JSON.stringify(object));\n            }.bind(this));\n        } else {\n            return this.stompClientSearch.send(path, {}, JSON.stringify(object));\n        }\n\n    }\n\n\n    disconnect(){\n        this.socket.close();\n        this.stompClient.disconnect();\n    }\n\n}\nexport default SocketService.instance;"],"sourceRoot":"/"}